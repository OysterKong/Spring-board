1. 게시판 테이블 sql

CREATE TABLE `boardtest`.`board` (
  `bno` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(100) NOT NULL,
  `content` TEXT NOT NULL,
  `writer` VARCHAR(30) NOT NULL,
  `view_cnt` INT NULL DEFAULT 0,
  `comment_cnt` INT NULL DEFAULT 0,
  `reg_date` DATE NULL DEFAULT now(),
  `up_date` DATE NULL DEFAULT now(),
  PRIMARY KEY (`bno`));
  
  
  ----------------------------위와 동일
  create table board (
  	bno int auto_increment primary key,
  	title varchar(45) not null,
  	content text not null,
  	writer varchar(30) not null,
  	view_cnt int default 0 null,
  	comment_cnt int default 0 null,
  	reg_date datetime null
 );
 
 =====================================================================================================================================
 
 1. 게시판에 사용할 boardMapper 에 sql문 작성 ( 어떤 기능이 필요할지 생각해보고 작성 )
 - 게시판이니까 기본적인 CRUD - 게시글 읽어오고, 작성하고, 수정하고, 삭제하는데 필요한 sql문과 전체 삭제, 조회수 증가, 댓글수 조회 등등
 
 2. boardMapper에 작성한 sql문을 토대로 BoardDao를 작성 ( boardMapper에서 parameterType과 resultType을 확인 후 알맞게 작성 )
 3. 작성된 BoardDao를 기준으로 interface 작성 ( Refactor - Extract Interface )
 4. 작성된 BoardDao를 기준으로 BoardService 작성 ( 여기서는 메서드명을 read, write, modify, remove로 수정만 했을뿐 boardDao를 통해 연결하는 내용부분은 같음 )
 5. 작성된 BoardService 기준으로 interface작성 ( Refactor - Extract Interface )
 6. BoardController 작성
 - Controller에서는 리스트를 어떻게 화면에 뿌려줄지, 뿌려주기 전 Db에 담긴 정보들을 뿌리기전 페이지를 어떻게 나눠줄지를 생각해 본다.
 - 1페이지에 10개씩(boardSize =10) 또 가장 처음 화면에서 page가 null 값이므로 이때 어떻게 설정할지 ( if(page==null) page=1; if(pageSize==null) pageSize=10 으로 기본값 설정 )
 - boardMapper에서 페이지 계산하는 selectPage 의 값을 받는 부분 - offset, pageSize 에 대해서 controller 단에서 계산하여 Model 에 담아서 view 단으로 넘겨준다는 점.
 
 7. 기본적인 CRUD (쓰기/읽기/수정/삭제) 기능 구현 전 URI를 정리
 
 작업 /     URI               / http메서드 /   설명
 읽기 = /board/read?bno=번호   / get / 지정된 번호의 게시물을 보여준다
 삭제 = /board/remove         / post / 게시물을 삭제한다
 쓰기 = /board/write          / get / 게시물을 작성하기 위한 화면을 보여준다
 쓰기 = /board/write          / post / 작성한 게시물을 저장한다
 수정 = /board/modify?bno=번호 / get / 게시물을 수정하기 위해 읽어온다
 수정 = /board/modify         / post / 수정된 게시물을 저장한다
 
 8. 읽기 기능에 대한 흐름
 - boardList.jsp 에 뿌려진 제목(title) 을 사용자가 클릭하면 제목에 걸려있는 링크를 따라서 게시물번호(bno) 가 controller로 전달
 - controller에서는 read 메서드가 넘어온 bno를 받아서 boardService.read(bno)로 전달하고 Db에서 게시물을 읽어서 boardDto에 담아서 controller로 전달
 - controller의 read 메서드가 Db에서 읽어온 boardDto를 board.jsp에 전달
 - board.jsp 에서는 boardDto에 담겨져 있는 ${boardDto.title} 과 ${boardDto.content}를 읽어서 화면에 보여줌
 
 9. boardController 에 read메서드 작성
 
 10. 게시판에서 글제목을 클릭하면 해당 글번호에 해당하는 내용을 보여줘야하는데 이는 각 게시물의 고유번호인 bno를 전달받아야함
 또 글 내용을 확인 후 목록버튼을 누르면 다시 내가 처음에 확인하던 리스트로 돌아가야하므로 page와 pageSize를 전달받아야함
 
 11. rattr.addFlashAttribute = 새로고침시 계속 alert뜨는 것 방지 , session에 저장했다가 사용하고 삭제
 
 12. 어떤 기능에 대한 순서, 또 기존 사이트에서 단계에 따라서 어떻게 진행되는지 한번쯤은 고민해봐야한다.
 예를 들어서 새 글을 쓴뒤 등록에 성공하면 작성한 글이 제일 맨앞에 위치하므로 그냥 boardlist 로 이동하면 되지만 수정이나 삭제할 시에는 그 수정 및 삭제된 글이 있는 페이지로 가야하므로 get방식으로 글번호와
 페이지사이즈를 보내줘야 있던 리스트로 이동할 수 있다.
 추가로 수정 또는 삭제 시에 실패할 경우, 작성한 제목 및 내용이 남아있어야하므로 모델에 담아서 view 단으로 넘겨주는 걸 생각하자.
 
 13. <c:out value=  /> - 웹상에서 글을 쓸때 html tag를 통해 심각한 오류를 발생시킬수 있는 위험을 막기위해서는 글제목 또는 내용에 out 태그를 통해 막아주어야한다는 점 잊지말자.
 
 
 14. 댓글기능 위한 테이블
 
 - cno : 댓글번호
 - bno : 게시물번호
 - pcno : 대댓글번호
 - comment : 댓글내용
 - commenter : 댓글작성자
 - reg_date : 댓글작성일
 - up_date : 댓글수정일
 
 -------------------------------------------------------------------------------------------
 
 	CREATE TABLE `boardtest`.`comment` (
	  `cno` INT NOT NULL AUTO_INCREMENT,
	  `bno` INT NOT NULL,
	  `pcno` INT NULL,
	  `comment` VARCHAR(3000) NULL,
	  `commenter` VARCHAR(30) NULL,
	  `reg_date` DATETIME NULL DEFAULT now(),
	  `up_date` DATETIME NULL DEFAULT now(),
	  PRIMARY KEY (`cno`))
	ENGINE = InnoDB
	DEFAULT CHARACTER SET = utf8;
 
 
   create table 'boardtest', 'comment' (
  	'cno' int auto_increment not null primary key,
  	'bno' int not null,
  	'pcno' int null,
  	'comment' varchar(3000) null,
  	'commenter' varchar(30) null,
  	'reg_date' datetime null default now(),
  	'up_date' datetime null default now()
 );
 
 
 15. @PathVariable 는 쿼리스트링 (ex : http://localhost/kong/comments?bno=426 ) 방식이 아니라 번호를 지정입력되는 경우 ( ex : http://localhost/kong/comments/3 ) 에
  @PathVariable 를 적어줘야 / 이후 입력되어 실행할 수 있다.
  
 16. @ResponseBody와 @Controller 를 합친 어노테이션 = @RestController 하나로 클래스 안 모든 메서드에 @ResponseBody 붙인 효과

 
 
 
 